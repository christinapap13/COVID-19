import operator
from sklearn.model_selection import RandomizedSearchCV, train_test_split
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,mean_absolute_error
from calendar import monthrange
from sklearn.model_selection import GridSearchCV
from sklearn.model_selection import RandomizedSearchCV
from sklearn import svm
import pandas as pd
from sklearn import preprocessing
from sklearn import utils
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler, MinMaxScaler
import matplotlib.pyplot as plt
import datetime as dt
from sklearn import svm
import numpy as np
from sklearn import linear_model


kernel=['poly','sigmoid','rbf']
c=[0.01,0.1,1,10]
gamma=[0.01, 0.1,1]
epsilon=[0.01,.1,1]
shrinking=[True,False]
svm_grid={'kernel':kernel,"C":c}
svm=SVR()
svm_search=RandomizedSearchCV(svm,svm_grid,scoring='neg_mean_squared_error',cv=3,return_train_score=True)
start_year = 2020
start_month = 1
start_day = 22
start_from = f"{start_year}-{start_month}-{start_day}"
dates_files = pd.date_range(start=start_from, end = datetime.today()).to_frame(index=False)
dates_files=dates_files.head(-2)
world_cases=[557.0, 1097.0, 941.0, 1437, 2118, 2927, 5578, 6165, 8235, 9925, 12038, 16787, 19881, 23892, 27636, 30818, 34392, 37121, 40151, 42763, 44803, 45222, 60370, 66887,69033, 71226, 73260, 75138, 75641, 76199, 76843, 78599, 78985, 79570, 80415, 81397, 82756, 84125, 86012, 88368, 90311, 92856, 95127, 97936, 101763, 105832, 109820,113776, 118587, 125850, 128329, 145182, 156084, 167408, 181571, 197205, 214983, 242674, 272268, 304672, 337867, 378498, 417891, 467535, 529674, 593447, 660731, 720010, 782363, 857474, 932424, 1013000, 1095745, 1175839, 1249493, 1321234, 1394919, 1480228, 1563672, 1657110, 1735167, 1834310, 1904355, 1975657, 2055574, 2152147, 2239794, 2321117, 2400898, 2471984, 2549043, 2627680, 2708317, 2811332, 2897485, 2971887, 3042300, 3117208, 3195905, 3259204, 3346773, 3429780, 3508943, 3585275, 3665091, 3758517, 3848861, 3940353, 4026678, 4104021, 4179418, 4264437, 4350082, 4444827, 4544933, 4636788, 4716823, 4805347, 4900621, 4999271, 5105338, 5213965,5313390, 5410156, 5497542, 5592934, 5695051, 5812589, 5927813, 6062339, 6169759, 6268961, 6390317, 6508987, 6637300, 6774861, 6900769, 7014817, 7123258, 7247040, 7365838, 7519855, 7638474, 7772745, 7906350, 8039796, 8179595, 8356984, 8496684, 8676282, 8799939, 8963081, 9107546, 9273974, 9442846, 9622148, 9814054, 9991652, 10160555, 10315359, 10489497, 10706673, 10885658, 11089497, 11281843, 11465160, 11634302, 11844371, 12058124, 12283735, 12515215, 12733536, 12925696, 13118901, 13339451, 13571400, 13819779, 14070589, 14307561, 14521495, 14722363, 14962395, 15242079, 15525021, 15806988, 16060211, 16266193, 16501293, 16705724, 17045576, 17326137, 17616879, 17865956, 18097315, 18304992, 18563150, 18839011, 19124384, 19406879, 19666003, 19891694, 20118212, 20375150, 20661378, 20939745, 21242139, 21492927, 21708091, 21915768, 22173970, 22452739, 22725049, 22986798, 23240456, 23457874, 23684077, 23927624, 24209771, 24490324, 24774645, 25039752, 25260750, 25525844, 25791408, 26073942, 26347904, 26653853, 26924339, 27163600, 27376674, 27615947, 27909101, 28208269, 28529234, 28816444, 29058929, 29239114, 29608236, 29912015, 30227152, 30553123, 30845945, 31098993, 31375022, 31659721, 31934239, 32287655, 32623213, 32912240, 33167113, 33419733, 33702859, 34028416, 34341074, 34646578, 34964892,35240611, 35537305, 35868376, 36218160, 36579557, 36940601, 37297827, 37584889, 37876866, 38196286, 38578375, 38985480, 39397250, 39769947, 40086708, 40473949, 40863185, 41307362, 41780108, 42286249, 42741408, 43140762, 43582027, 44052995, 44571209, 45109750, 45675758, 46162055, 46632406, 47136818, 47654616, 48252941, 48849909, 49494791, 50091862, 50575685, 51043272, 51607037, 52255204, 52905000, 53556847, 54151573, 54625261, 55158682, 55770003, 56396925, 57050102, 57718479, 58305723,58793713, 59318419, 59908426, 60543865, 61125989, 61813227, 62398810, 62887073, 63395077, 64006923, 64657540, 65351035, 66034127, 66675620, 67214412, 67733834, 68376697, 69045713, 70542873, 71245705, 71879858, 72410059, 72933933, 73570426, 74303100, 75041733, 75761114, 76372594, 76905598, 77454227, 78103380, 78797459, 79464365, 79929494, 80441968, 80879838, 81375961, 82038435, 82798666, 83521859, 84054370, 84679917, 85212884, 85766126, 86504791, 87286422, 88166327, 88966439, 89729075, 90318122, 90936928, 91641834, 92389297, 93144039, 93909129, 94547911, 95076127, 95591185, 96198228, 96890121, 97546178, 98204479, 98772015, 99217695, 99714128, 100269237, 100866518, 101480537, 102070241, 102585112, 102967345, 103413233, 103870440, 104392192, 104858367, 105392905, 105764933, 106162758, 106478448, 106905813, 107340958, 107781878, 108210949, 108583902, 108877486, 109160854, 109511448, 109906540, 110309749, 110749144, 111119409, 111433102, 111721889, 112109754, 112554301, 113001412]
dates_files.columns = ['date']
dates_files['date']=dates_files['date'].map(dt.datetime.toordinal)
a = dates_files.to_numpy()
b = pd.DataFrame(world_cases)
b = b.to_numpy()
b = b.reshape(-1)
parameters = {'C': [0.001, 0.01, 0.1, 1, 10, 100], 'gamma': [0.001, 0.01, 0.1, 1, 10, 100]}
search = GridSearchCV(SVR(), parameters, cv=3)
search.fit(a, b)
x_test = [734847,734848,734849,734850,734851,734852,734853,734854,734855,734856]
x_test = pd.DataFrame(x_test)
x_test = x_test.to_numpy()
X_train_confirmed,X_test_confirmed,y_train_confirmed,y_test_confirmed=train_test_split(a,b,test_size=0.15, shuffle=False)
X_train = preprocessing.scale(X_train_confirmed)
X_test = preprocessing.scale(X_test_confirmed)
future = [737847,737848,737849,737850,737851,737852,737853,737854,737855,737856]
future=preprocessing.scale(future)
future=pd.DataFrame(future)
future=future.to_numpy()
y_train=preprocessing.scale(y_train_confirmed)
svm_search.fit(X_train,y_train)
svm_confirmed=svm_search.best_estimator_
svm_pred=svm_confirmed.predict(future)
svm_test_pred=svm_confirmed.predict(X_test)
y_test=preprocessing.scale(y_test_confirmed)


plt.xlabel('X_train')
xticks=(X_train)
svm_test_predd=svm_test_pred.reshape(-1,1)
world_casess=preprocessing.scale(world_cases)
dates_filess=preprocessing.scale(dates_files)
plt.figure(figsize=(20,12))
plt.plot(dates_filess,world_casess)
plt.plot(future,svm_pred,linestyle='dashed',color='purple')
plt.title('Number of coronavirus cases over Time', size=30)
plt.xlabel('Days since 22/1/2020', size=30)
plt.ylabel('Number of Cases', size=30)
plt.legend(['Confirmed Cases', 'svm predictions'])
plt.xticks(size=15)
plt.yticks(size=15)





